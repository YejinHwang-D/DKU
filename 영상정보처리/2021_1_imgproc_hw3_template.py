# -*- coding: utf-8 -*-
"""2021-1-ImgProc-HW3-황예진-32195044.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LcTziMCUkvWhhhJkjfuVcpEzqM7JQqd

## 2021-1 영상정보처리 3주차 과제 템플리트
마감: 2021년 3월 25일 오후 11시 59분
이름:            
학번:

구글 드라이브를 연결하고 자신의 노트북이 저장되어 있는 폴더로 이동하시오
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive 
drive.mount('/gdrive')
# %cd /gdrive/My Drive/Classroom/[영상정보처리] 2000004793-2021-1/2021-1 영상정보처리 3강/

"""다음에 이미지 경로 '../Dongkeun-OpenCV-ImgData/logo.png' 를 변경하지 말고 이미지를 읽고, 해당 이미지에 대한 type, size, dtype 등의 속성을 체크하시오. """

import matplotlib.pyplot as pyplot
import matplotlib.cm as cm
import cv2
img = cv2.imread('../Dongkeun-OpenCV-ImgData/logo.png')

print('type = ', type(img))
print('size = ', img.size)
print('dtype = ', img.dtype)

"""다음의 셀에 읽은 이미지에서 좌표 y = 100, x = 50 에 있는 화소의 각 색요소 값을 한번에 읽어 출력하시오. 또한 각 색요소의 값을 별도로 가져오는 예를 작성하시오."""

pyplot.imshow(img)
pyplot.show()

#한번에 출력
(b, g, r) = img[100, 50]
print(b, g, r)

#별도로 가져오기
b = img[100, 50, 0]
print(b)
g = img[100, 50, 1]
print(g)
r = img[100, 50, 2]
print(r)

"""다음의 셀에 읽은 이미지에서 좌표 y = 100, x = 50 의 화소를 순수 녹색(green) 으로 세팅하는 코드를 작성하고 해당 분야를 ROI 를 이용해 확대해서 출력하시오. """

img[100, 50] = (0, 255, 0)
roi = img[70:120, 20:70]
pyplot.imshow(roi)
pyplot.show()

"""## Accessing and Manipulating pixels in opencv with grayscale images

위에서 사용한 동일 입력 이미지를 읽어서 matplotlib.pyplot에 맞는 채널 순서로 변환하고 본래 이미지와 변환된 이미지를 matplotlib.pyplot 을 이용하여 출력하시오. 

"""

opencv_img = cv2.imread('../Dongkeun-OpenCV-ImgData/logo.png')

#채널 순서로 변환
b, g, r = cv2.split(opencv_img)
matp_img = cv2.merge([r, g, b])

#본래 이미지 - 변환 이미지
pyplot.subplot(121)
pyplot.imshow(opencv_img)
pyplot.subplot(122)
pyplot.imshow(matp_img)
pyplot.show()

"""## In Depth Example
강의노트 'In Depth' 부분에 있는 예제를 임의의 값을 이용하여 예시하고 간단한 설명을 붙여 자기 노트를 완성하시오. 
"""

import numpy as np

#A 3-dimensional
arr = np.array([[[0,1],
               [2, 3]],
             
             [[4, 5],
              [6, 7]]]) 
# get: sheet 0, both rows, flip order of columns(use ::-1)
arr[0, :, ::-1]

# A 0-D array
a = np.array(5.5)
print("*a array = ", a)

# A 1-D array, shape-(3,)
b = np.array([2.3, 0.1, -9.1])
print("*b array = ", b)

# A 2-D array, shape-(3, 2)
c = np.array([[93, 95],
          [84, 100],
          [99, 87]])
print("*c array = ", c)
# A 3-D array, shape-(2, 2, 2)
d = np.array([[[0, 1,],
           [2, 3]],
          
          [[4, 5],
           [6, 7]]])
print("*d array = ", d)

simple_array = np.array([100, 0.25, -8.888])
# print array[2], third value
print("simple_array[2] = ", simple_array[2])

# print array[-3] resulut --> first value (뒤에서부터)
simple_array[-3]

# print second value ~ third value
simple_array[1:3]

#1-dimensional array(1차원)
grades = np.array([93, 95, 84, 100, 99, 87])
grades.shape

#2-dimensional array(2차원)
grades = np.array([[93, 95],
                   [84, 100],
                   [99, 87]])
grades.shape

# in a 2D-array
# print rows, columns
grades[2, 0]

# negative indices work as with lists/tuples/strings
print(grades[-3, 1])
print(grades[-2:, 0])